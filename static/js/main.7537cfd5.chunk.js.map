{"version":3,"sources":["Components/Items.js","App.js","serviceWorker.js","index.js"],"names":["Frame","styled","div","Div","Items","props","hidden","items","map","item","key","theID","style","float","theText","theVote","type","checked","theCheck","value","onChange","id","selected","Input","input","Button","button","ButtonBot","App","state","text","inputHandle","e","setState","target","addHandle","selectedHandle","console","log","voteHandle","continueHandle","className","onClick","this","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yoBAIA,IAAMA,EAAQC,IAAOC,IAAV,KAULC,EAAMF,IAAOC,IAAV,KAMM,SAASE,EAAMC,GAK5B,OACE,kBAACF,EAAD,KACIE,EAAMC,OAcJD,EAAME,MAAMC,KAAI,SAACC,GACf,OACE,yBAAKC,IAAKD,EAAKE,OACb,kBAACX,EAAD,KACE,0BAAMY,MAAO,CAAEC,MAAO,SAAtB,SAAuCJ,EAAKK,SAC5C,0BAAMF,MAAO,CAAEC,MAAO,UAAtB,oBACoBJ,EAAKM,SAEzB,kCArBRV,EAAME,MAAMC,KAAI,SAACC,GACf,OACE,kBAACT,EAAD,CAAOU,IAAKD,EAAKE,OACf,2BACEK,KAAK,QACLC,QAASR,EAAKS,SACdC,MAAOV,EAAKK,QACZM,SAAU,kBAdFC,EAcuBZ,EAAKE,WAblDN,EAAMiB,SAASD,GADjB,IAAwBA,KAgBTZ,EAAKK,a,82BC9BtB,IAAMS,EAAQtB,IAAOuB,MAAV,KAaLC,EAASxB,IAAOyB,OAAV,KAaNC,EAAY1B,IAAOyB,OAAV,KAuHAE,E,4MAzGbC,MAAQ,CACNC,KAAM,GACNvB,MAAO,GACPD,QAAQ,G,EAGVyB,YAAc,SAACC,GACb,EAAKC,SAAS,CACZH,KAAME,EAAEE,OAAOf,S,EAInBgB,UAAY,SAACd,IACe,IAAtB,EAAKQ,MAAMvB,QACb,EAAK2B,SAAS,CACZ1B,MAAM,GAAD,mBACA,EAAKsB,MAAMtB,OADX,CAEH,CACEO,QAAS,EAAKe,MAAMC,KACpBZ,UAAU,EACVP,MAAOU,EACPN,QAAS,Q,EAOnBqB,eAAiB,SAACf,GAChBgB,QAAQC,IAAIjB,GACZ,EAAKY,SAAS,CACZ1B,MAAO,EAAKsB,MAAMtB,MAAMC,KAAI,SAACC,GAC3B,OAAIY,IAAOZ,EAAKE,MACP,CACLG,QAASL,EAAKK,QACdI,UAAU,EACVP,MAAOF,EAAKE,MACZI,QAASN,EAAKM,SAGX,CACLD,QAASL,EAAKK,QACdI,UAAU,EACVP,MAAOF,EAAKE,MACZI,QAASN,EAAKM,e,EAMtBwB,WAAa,YACe,IAAtB,EAAKV,MAAMvB,QACb,EAAK2B,SAAS,CACZ1B,MAAO,EAAKsB,MAAMtB,MAAMC,KAAI,SAACC,GAC3B,OAAsB,IAAlBA,EAAKS,SACA,CACLJ,QAASL,EAAKK,QACdI,SAAUT,EAAKS,SACfP,MAAOF,EAAKE,MACZI,QAASN,EAAKM,QAAU,GAGrB,CACLD,QAASL,EAAKK,QACdI,SAAUT,EAAKS,SACfP,MAAOF,EAAKE,MACZI,QAASN,EAAKM,YAGlBT,QAAQ,K,EAKdkC,eAAiB,WACf,EAAKP,SAAS,CACZ3B,QAAQ,K,EAIZe,GAAK,E,uDACK,IAAD,OAEP,OACE,yBAAKoB,UAAU,OACb,6BACE,kBAAClB,EAAD,CAAOH,SAAU,SAACY,GAAD,OAAO,EAAKD,YAAYC,MACzC,kBAACP,EAAD,CAAQiB,QAAS,kBAAM,EAAKP,UAAU,EAAKd,QAA3C,QAEF,kBAACjB,EAAD,CACEG,MAAOoC,KAAKd,MAAMtB,MAClBe,SAAUqB,KAAKP,eACf9B,OAAQqC,KAAKd,MAAMvB,SAEpBqC,KAAKd,MAAMtB,MAAMqC,OAAS,EACzB,6BACE,kBAACjB,EAAD,CAAWe,QAASC,KAAKJ,YAAzB,QACA,kBAACZ,EAAD,CAAWe,QAASC,KAAKH,gBAAzB,aAEA,U,GApGMK,IAAMC,WClCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.7537cfd5.chunk.js","sourcesContent":["import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst Frame = styled.div`\n  margin-top: 50px;\n  margin-bottom: 50px;\n  width: 99%;\n  padding: 5px 5px 5px 5px;\n  font-size: 1.2em;\n  font-family: Courier New;\n  font-weight: bold;\n`;\n\nconst Div = styled.div`\n  background-color: #f7f1e3;\n  width: 50vw;\n  margin-left: 25vw;\n`;\n\nexport default function Items(props) {\n  function onChangeHandle(id) {\n    props.selected(id);\n  }\n\n  return (\n    <Div>\n      {!props.hidden\n        ? props.items.map((item) => {\n            return (\n              <Frame key={item.theID}>\n                <input\n                  type=\"radio\"\n                  checked={item.theCheck}\n                  value={item.theText}\n                  onChange={() => onChangeHandle(item.theID)}\n                />\n                {item.theText}\n              </Frame>\n            );\n          })\n        : props.items.map((item) => {\n            return (\n              <div key={item.theID}>\n                <Frame>\n                  <span style={{ float: \"left\" }}>Item: {item.theText}</span>\n                  <span style={{ float: \"right\" }}>\n                    Number of votes: {item.theVote}\n                  </span>\n                  <br />\n                </Frame>\n              </div>\n            );\n          })}\n    </Div>\n  );\n}\n","import React from \"react\";\n\nimport Items from \"./Components/Items\";\nimport styled from \"styled-components\";\n\nimport \"./App.css\";\n\nconst Input = styled.input`\n  display: inline-block;\n  background-color: #f8c291;\n  border: none;\n  color: black;\n  font-size: 1.6rem;\n  outline: none;\n  padding: 5px;\n  font-size: 1.2em;\n  font-family: Courier New;\n  font-weight: bold;\n`;\n\nconst Button = styled.button`\n  display: inline-block;\n  border: none;\n  background-color: #3c6382;\n  color: #f8c291;\n  padding: 5px;\n  font-size: 1.2em;\n  font-family: Courier New;\n  font-weight: bold;\n  width: 100px;\n  margin-left: 10px;\n`;\n\nconst ButtonBot = styled.button`\n  display: inline-block;\n  border: none;\n  background-color: #e58e26;\n  color: #3c6382;\n  padding: 5px;\n  font-size: 1.2em;\n  font-family: Courier New;\n  font-weight: bold;\n  width: 200px;\n  margin-left: 10px;\n`;\n\nclass App extends React.Component {\n  state = {\n    text: \"\",\n    items: [],\n    hidden: false,\n  };\n\n  inputHandle = (e) => {\n    this.setState({\n      text: e.target.value,\n    });\n  };\n\n  addHandle = (id) => {\n    if (this.state.hidden === false) {\n      this.setState({\n        items: [\n          ...this.state.items,\n          {\n            theText: this.state.text,\n            theCheck: false,\n            theID: id,\n            theVote: 0,\n          },\n        ],\n      });\n    }\n  };\n\n  selectedHandle = (id) => {\n    console.log(id);\n    this.setState({\n      items: this.state.items.map((item) => {\n        if (id !== item.theID) {\n          return {\n            theText: item.theText,\n            theCheck: false,\n            theID: item.theID,\n            theVote: item.theVote,\n          };\n        }\n        return {\n          theText: item.theText,\n          theCheck: true,\n          theID: item.theID,\n          theVote: item.theVote,\n        };\n      }),\n    });\n  };\n\n  voteHandle = () => {\n    if (this.state.hidden === false) {\n      this.setState({\n        items: this.state.items.map((item) => {\n          if (item.theCheck === true) {\n            return {\n              theText: item.theText,\n              theCheck: item.theCheck,\n              theID: item.theID,\n              theVote: item.theVote + 1,\n            };\n          }\n          return {\n            theText: item.theText,\n            theCheck: item.theCheck,\n            theID: item.theID,\n            theVote: item.theVote,\n          };\n        }),\n        hidden: true,\n      });\n    }\n  };\n\n  continueHandle = () => {\n    this.setState({\n      hidden: false,\n    });\n  };\n\n  id = 0;\n  render() {\n    // this.id++;\n    return (\n      <div className=\"App\">\n        <div>\n          <Input onChange={(e) => this.inputHandle(e)} />\n          <Button onClick={() => this.addHandle(this.id++)}>Add</Button>\n        </div>\n        <Items\n          items={this.state.items}\n          selected={this.selectedHandle}\n          hidden={this.state.hidden}\n        />\n        {this.state.items.length > 1 ? (\n          <div>\n            <ButtonBot onClick={this.voteHandle}>Vote</ButtonBot>\n            <ButtonBot onClick={this.continueHandle}>Continue</ButtonBot>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}